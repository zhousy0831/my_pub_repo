name: Build

on:
  pull_request:
    branches:
      - main  # 或您保护的其他分支


jobs:
  build:
    name: Build and analyze
    runs-on: self-hosted
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Run SonarQube Scanner
        shell: cmd
        run: |
          sonar-scanner

      - name: Wait for sonarqube scan finished
        shell: cmd
        run: |
          echo Waiting for 2 minutes...
          cmd /c "timeout /t 120"


      - name: Check SonarQube Quality Gate
        shell: cmd
        env:
          token: sqp_6dda38485271affa1a4c09ca2df9734754d6551b
          project_key: my_pub_repo
          host_url: http://159.99.218.157:9002
        run: |
          cd C:\Work\projects\SonarQube\source\
          python sonarqube_get_quality_gate_status.py

      # - name: Check return code
      #   shell: cmd
      #   run: |
      #     if [ "${{ env.return_code }}" -ne 0 ]; then
      #         echo "Script failed with return code: ${{ env.return_code }}"
      #     else
      #         echo "Script executed successfully."
      #     fi

      # - name: SonarQube Quality Gate
      #   shell: cmd
      #   run: |
      #     echo "quality_gate_status=$?" >> $GITHUB_ENV
      #     if [ "${{ env.quality_gate_status }}" -eq 0 ]; then
      #       echo "SonarQube Quality Gate Passed!"
              # set /p result=<result.txt
          # if %ERRORLEVEL%==0 (
          #   echo SonarQube Quality Gate Passed!. Result: %result%
          # ) else (
          #   echo SonarQube Quality Gate failed with exit code: %ERRORLEVEL%.
          #   exit /b %ERRORLEVEL%  # 退出工作流，状态为失败
          # )
      #     else
      #       echo "SonarQube Quality Gate failed with exit code ${{ env.quality_gate_status }}"
      #       exit 1
      #     fi
        # run: |
        #   setlocal enabledelayedexpansion
        #   for /f "tokens=*" %%i in ('curl -s -u %SONAR_TOKEN%: "%SONAR_HOST_URL%api/qualitygates/project_status?projectKey=%SONAR_PROJECT_KEY%"') do (
        #       set "line=%%i"
        #   )
        #   echo Quality Gate status: !line!
        #   echo !line! | findstr "OK" >nul
        #   if errorlevel 1 (
        #       echo Quality gate failed!
        #       exit /b 1
        #   )
      #- name: SonarQube Scan
      #  env:
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # 你可以在 GitHub Secrets 中存储 SonarQube 的token
      #    SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #    EXTRA_ARGS: "-X"  # 追加的参数
      #  run: |
      #    sonar-scanner -Dsonar.sources=.
      #   sonar-scanner -Dsonar.projectKey=your_project_key
      #    -Dsonar.host.url=https://your-sonarqube-url
      #- uses: sonarsource/sonarqube-scan-action@v4
      #  env:
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #    SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #    EXTRA_ARGS: "-X"  # 追加的参数
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@v1
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
